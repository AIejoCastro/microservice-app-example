version: '3.8'

services:
  # Redis - Cache Aside Pattern implementation
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # Auth API (Go)
  auth-api:
    build: 
      context: ./auth-api
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-jwt-secret-key
      - GIN_MODE=release
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Users API (Java Spring Boot)
  users-api:
    build: 
      context: ./users-api
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SPRING_PROFILES_ACTIVE=docker
      - CACHE_TTL=3600
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # TODOs API (Node.js)
  todos-api:
    build: 
      context: ./todos-api
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NODE_ENV=production
      - CACHE_TTL=1800
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Frontend (Vue.js) - Circuit Breaker Pattern implemented
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - VUE_APP_AUTH_API_URL=http://localhost:8000
      - VUE_APP_USERS_API_URL=http://localhost:8083
      - VUE_APP_TODOS_API_URL=http://localhost:8082
      - VUE_APP_CIRCUIT_BREAKER_TIMEOUT=5000
      - VUE_APP_CIRCUIT_BREAKER_THRESHOLD=5
    depends_on:
      - auth-api
      - users-api
      - todos-api
    networks:
      - app-network
    restart: unless-stopped

  # Log Message Processor (Python)
  log-message-processor:
    build: 
      context: ./log-message-processor
      dockerfile: Dockerfile
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LOG_LEVEL=INFO
    depends_on:
      - redis
    networks:
      - app-network
    restart: unless-stopped

  # Monitoring Stack (resto igual...)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - app-network
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data: