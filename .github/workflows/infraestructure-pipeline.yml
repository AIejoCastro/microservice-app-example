name: Infrastructure Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'terraform/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
  workflow_dispatch:

env:
  TF_VERSION: 1.5.0
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform-validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Format Check
      working-directory: terraform
      run: terraform fmt -check -recursive
    
    - name: Terraform Init
      working-directory: terraform
      run: terraform init -backend=false
    
    - name: Terraform Validate
      working-directory: terraform
      run: terraform validate

  terraform-plan:
    needs: terraform-validate
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Terraform Init
      working-directory: terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=tfstate-rg" \
          -backend-config="storage_account_name=tfstate1758602366" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"
    
    - name: Terraform Plan
      working-directory: terraform
      run: terraform plan -out=tfplan -no-color
      id: plan
    
    - name: Upload Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 1
    
    - name: Comment PR (if PR)
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `### Terraform Plan
          \`\`\`
          ${process.env.PLAN}
          \`\`\``;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          });

  terraform-apply:
    needs: [terraform-validate, terraform-plan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Download Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: terraform
    
    - name: Terraform Init
      working-directory: terraform
      run: |
        terraform init \
          -backend-config="resource_group_name=tfstate-rg" \
          -backend-config="storage_account_name=tfsa1758595608" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=terraform.tfstate"
    
    - name: Terraform Apply
      working-directory: terraform
      run: terraform apply -auto-approve tfplan